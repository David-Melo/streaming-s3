{"name":"Streaming-s3","tagline":"Streaming uploads to Amazon Web Service(AWS) S3 for NodeJS","body":"# Streaming-S3\r\n\r\n[![Build Status](https://travis-ci.org/talha-asad/streaming-s3.png?branch=master)](https://travis-ci.org/talha-asad/streaming-s3)\r\n\r\nA simple and light-weight S3 upload streaming module for NodeJS.\r\n\r\n\r\n## Benefits & Features\r\n* Tons of configurable options\r\n* Low memory usage\r\n* Parallel part uploading\r\n* Simple interface (Asynchronous and evented)\r\n* Downloading and uploading statistics (U/D speed and U/D time)\r\n* Super fast\r\n* Proper usage of streams and graceful error handling\r\n* Production ready (Used and tested on production environments, uploading gigabytes of files to S3)\r\n* Uses official AWS SDK\r\n\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install streaming-s3\r\n```\r\n\r\n\r\n## Example Usage\r\n\r\n\r\n### Example 1: Uploading local file with callback.\r\n\r\n```js\r\nvar Streaming-S3 = require('streaming-s3'),\r\n    fs = require('fs');\r\n\r\nvar fStream = fs.CreateReadStream(__dirname + '/video.mp4');\r\nvar uploader = new Streaming-S3(fStream, 'accessKey', 'secretKey',\r\n  {\r\n    Bucket: 'example.streaming-s3.com',\r\n    Key: 'video.mp4',\r\n    ContentType: 'video/mp4'\r\n  },  function (err, resp, stats) {\r\n  if (err) return console.log('Upload error: ', e);\r\n  console.log('Upload stats: ', stats);\r\n  console.log('Upload successful: ', resp);\r\n  }\r\n);\r\n```\r\n\r\n### Example 2: Uploading local file without callback.\r\n\r\n```js\r\nvar Streaming-S3 = require('streaming-s3'),\r\n    fs = require('fs');\r\n\r\nvar fStream = fs.CreateReadStream(__dirname + '/video.mp4');\r\nvar uploader = new Streaming-S3(fStream, 'accessKey', 'secretKey',\r\n  {\r\n    Bucket: 'example.streaming-s3.com',\r\n    Key: 'video.mp4',\r\n    ContentType: 'video/mp4'\r\n  }\r\n);\r\n  \r\nuploader.begin(); // important if callback not provided.\r\n\r\nuploader.on('data', function (e, bytesRead) {\r\n  console.log(bytesRead, ' bytes read.');\r\n});\r\n\r\nuploader.on('partUploaded', function (e, partNumber) {\r\n  console.log(partNumber, ' part uploaded.');\r\n});\r\n\r\n// All parts uploaded, but upload not yet acknowledged.\r\nuploader.on('uploaded', function (e, stats) {\r\n  console.log('Upload stats: ', stats);\r\n});\r\n\r\nuploader.on('finished', function (e, resp, stats) {\r\n  console.log('Upload finished: ', resp);\r\n});\r\n\r\nuploader.on('error', function (e) {\r\n  console.log('Upload error: ', e);\r\n});\r\n```\r\n\r\n\r\n### Example 3","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}